"""
Django settings for Carousel project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from django.utils.translation import gettext_lazy as _


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-=b*7t+5=y6&yoq&^7a+^6dld7l+cgt=*md%_50)o7czvwt9r2t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['10.0.2.2', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    'cre.apps.CreConfig',   # cre App
    'notifications.apps.NotificationsConfig',     # notifications App
    'analytics.apps.AnalyticsConfig',       # analytics App
    'subscriptions.apps.SubscriptionsConfig',
    'payments.apps.PaymentsConfig',
    'archive.apps.ArchiveConfig',
    'payroll.apps.PayrollConfig',
    'permissions.apps.PermissionsConfig',
    'printing.apps.PrintingConfig',
    'kafka_consumer.apps.KafkaConsumerConfig',

    # django-allauth
    'allauth',
    'allauth.account',

    # Optional -- requires install using `django-allauth[socialacocunt]`.
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Third Party
    'rest_framework',
    'rest_framework.authtoken', # required since we'll use TokenAuthentication instead of Django's default SessionAuthentication
    'channels',
    'adrf',
    
    'dj_rest_auth',
    'dj_rest_auth.registration',

    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # django-allauth account middleware:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'Carousel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'notifications/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    'cre.backends.emailUserPhoneAuthBackend.CustomAuthBackend',  # Backend for Auth by email|phone|
    'allauth.account.auth_backends.AuthenticationBackend', # `allauth` specific authentication methods, such as login by email
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'cre.middleware.customJWTAuth.CustomJWTAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        # Add other authentication classes as needed
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

PASSWORD_HASHERS = [
    'cre.hashers.Argon2Hasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    # Fallbacks if needed
]

REST_USE_JWT = True  # Enable JWT support for dj-rest-auth

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'AUTH_COOKIE': '__cess_token',  # Name of the access token cookie
    'AUTH_COOKIE_SECURE': False,  # Set to True in production (requires HTTPS)
    'AUTH_COOKIE_HTTP_ONLY': True,  # Prevent JavaScript access
    'AUTH_COOKIE_PATH': '/',  # Global path for the cookie
    'AUTH_COOKIE_SAMESITE': 'Lax',  # CSRF protection
    'REFRESH_COOKIE': '__fresh_token',  # Name of the refresh token cookie
    'REFRESH_COOKIE_PATH': '/',  # Global path for refresh cookie
    'REFRESH_COOKIE_SECURE': False,  # Set to True in production
    'REFRESH_COOKIE_HTTP_ONLY': True,  # Prevent JavaScript access
    'REFRESH_COOKIE_SAMESITE': 'Lax',
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

WSGI_APPLICATION = 'Carousel.wsgi.application'
# Load environment variables from .env file
try:
    load_dotenv()
except UnicodeDecodeError as e:
    print(f"Error loading .env file: {e}")


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
# Grant OWNER permission to user on DB 
# Error: MigrationSchemaMissing: Unable to create the django_migrations table => ALTER DATABASE db OWNER TO db_user;
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME'),
        'USER': os.getenv('DB_USER'),
        'PASSWORD': os.getenv('DB_PASSWORD'),
        'HOST': os.getenv('DB_HOST'),
        'PORT': os.getenv('DB_PORT'),
    }
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # "hosts": [os.getenv('REDIS_URL')],
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# Kafka Configuration 
KAFKA_BOOTSTRAP_SERVERS = 'localhost:9092'
KAFKA_SECURITY_PROTOCOL = 'SASL_SSL'
KAFKA_SASL_MECHANISM = 'PLAIN'
KAFKA_SASL_USERNAME = os.getenv('SASL_USERNAME')
KAFKA_SASL_PASSWORD = os.getenv('SASL_PASSWORD')
KAFKA_PRODUCER_CONFIG = {
    'bootstrap_servers': KAFKA_BOOTSTRAP_SERVERS,
    # 'security_protocol': KAFKA_SECURITY_PROTOCOL,
    # 'sasl_mechanism': KAFKA_SASL_MECHANISM,
    # 'sasl_plain_username': KAFKA_SASL_USERNAME,
    # 'sasl_plain_password': KAFKA_SASL_PASSWORD,
    # 'compression_type': 'gzip',  # Efficiency
    # 'linger_ms': 5,  # Batch messages for efficiency
    # 'max_request_size': 1048576  # 1MB, for large order payloads
}


# Celery configuration
REDIS_URL = os.getenv('REDIS_URL')  
CELERY_BROKER_URL = REDIS_URL   # Redis as broker
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SITE_ID = 1


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

AUTH_USER_MODEL = 'cre.CustomUser'

LANGUAGES = [
    ('en', _('English')),
    ('fr', _('French')),
    # Add more languages as needed
]

CURRENCIES = [
    ('XAF', 'Central African CFA Franc'),  # CEMAC: Cameroon, CAR, Chad, Congo, Equatorial Guinea, Gabon
    ('USD', 'US Dollar'),                 # Common for international transactions
    ('EUR', 'Euro'),                      # Pegged to XAF, used in trade
    ('ZAR', 'South African Rand'),        # Stable, widely traded
    ('NGN', 'Nigerian Naira'),            # Major West African currency
    ('GHS', 'Ghanaian Cedi'),             # Stable in West Africa
    ('XOF', 'West African CFA Franc'),     # WAEMU, for regional compatibility
    ('KES', 'Kenyan Shilling'),           # Stable East African currency
    ('RWF', 'Rwandan Franc'),             # Strong performer in East Africa
    ('TND', 'Tunisian Dinar'),            # Strongest in Africa (2025)
    ('MAD', 'Moroccan Dirham'),           # Stable North African currency
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# Static and media files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# SMTP Settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.getenv('SMTP_SERVER')                   # smtp-relay.sendinblue.com
EMAIL_USE_TLS = False                               # False
EMAIL_PORT = os.getenv('SMTP_PORT')                 # 587
EMAIL_HOST_USER = os.getenv('SMTP_LOGIN')               # your email address
EMAIL_HOST_PASSWORD = os.getenv('SMTP_PASSWORD')       # your password
DEFAULT_FROM_EMAIL = os.getenv('SMTP_LOGIN')  # email ending with @sendinblue.com

# print(f"EMAIL_HOST: {EMAIL_HOST}, EMAIL_PORT: {EMAIL_PORT}, EMAIL_HOST_USER: {EMAIL_HOST_USER}, EMAIL_HOST_PASSWORD: {EMAIL_HOST_PASSWORD}")

# django-allauth
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory" # make email verification mandatory on sign-up
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 0.25  # 6 hours

# <EMAIL_CONFIRM_REDIRECT_BASE_URL>/<key>
EMAIL_CONFIRM_REDIRECT_BASE_URL = \
    "http://localhost:8000/email/confirm/"

# <PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL>/<uidb64>/<token>/
PASSWORD_RESET_CONFIRM_REDIRECT_BASE_URL = \
    "http://localhost:8000/password/reset/confirm/"

INVITATION_ACCEPT_REDIRECT_BASE_URL = \
    "http://localhost:8000/api/a/role-assignments/handle/"


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "APP": {
            "client_id": os.getenv('GOOGLE_CLIENT_ID'),  
            "secret": os.getenv('GOOGLE_CLIENT_SECRET'),        
            "key": "",                               
        },
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
        "VERIFIED_EMAIL": True,
    },
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(levelname)s %(module)s %(process)d %(thread)d %(message)s',
        },
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'monthly_file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'app.log'),
            'when': 'midnight',
            'interval': 30,  # Rotate every 30 days (approximate month)
            'backupCount': 12,  # Keep 12 months of logs
            'formatter': 'verbose',
            'encoding': 'utf8',
        },
    },
    'root': {
        'handlers': ['console', 'monthly_file'],
        'level': 'INFO',
    },
}
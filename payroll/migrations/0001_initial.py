# Generated by Django 5.0.4 on 2025-08-18 08:41

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cre', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount applied for this rule', max_digits=12)),
            ],
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_salary', models.DecimalField(decimal_places=2, help_text='Base salary for the user', max_digits=12)),
                ('total_bonus', models.DecimalField(decimal_places=2, default=0, help_text='Total bonuses applied (sum of bonus components)', max_digits=12)),
                ('total_deduction', models.DecimalField(decimal_places=2, default=0, help_text='Total deductions applied (sum of deduction components)', max_digits=12)),
                ('net_pay', models.DecimalField(decimal_places=2, help_text='Final net pay (base + bonuses - deductions)', max_digits=12)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('generated', 'Generated'), ('failed', 'Failed')], default='pending', help_text='Processing status of the payroll record', max_length=20)),
                ('generated_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the payroll record was generated')),
            ],
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Descriptive name of the rule (e.g., 'Transport Bonus')", max_length=150)),
                ('rule_type', models.CharField(choices=[('bonus', 'Bonus'), ('deduction', 'Deduction')], help_text='Type of rule: bonus or deduction', max_length=20)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed amount for the rule', max_digits=12, null=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Percentage-based amount, if applicable (e.g., 5.00 for 5%)', max_digits=5, null=True)),
                ('scope', models.CharField(choices=[('company', 'Company'), ('restaurant', 'Restaurant'), ('branch', 'Branch'), ('user', 'User')], default='restaurant', help_text='Scope of rule application (company, restaurant, branch, user)', max_length=20)),
                ('priority', models.IntegerField(default=1, help_text='Higher priority rules override lower ones within the same scope')),
                ('effective_from', models.DateField(default=django.utils.timezone.now, help_text='Date from which the rule is effective')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the rule is currently active')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the rule was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the rule was last updated')),
            ],
        ),
        migrations.CreateModel(
            name='RuleTarget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_type', models.CharField(choices=[('role', 'Role'), ('user', 'User')], help_text="Type of target: role (e.g., 'server') or user (user ID)", max_length=20)),
                ('target_value', models.CharField(help_text='Value of the target (role name or user ID)', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='EffectiveRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Final computed amount after overrides', max_digits=12)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Final computed percentage after overrides, if applicable', max_digits=5, null=True)),
                ('source', models.CharField(choices=[('company', 'Company'), ('restaurant', 'Restaurant'), ('branch', 'Branch'), ('user', 'User')], help_text='Scope from which the rule originates (company, restaurant, branch, user)', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the effective rule was created')),
                ('branch', models.ForeignKey(help_text='Branch this rule applies to', on_delete=django.db.models.deletion.CASCADE, related_name='effective_rules', to='cre.branch')),
                ('user', models.ForeignKey(help_text='User this rule applies to', on_delete=django.db.models.deletion.CASCADE, related_name='effective_rules', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Override',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('override_type', models.CharField(choices=[('replace', 'Replace'), ('add', 'Add'), ('remove', 'Remove')], help_text='Action: replace rule value, add to it, or remove the rule', max_length=20)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Override amount, if applicable', max_digits=12, null=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, help_text='Override percentage, if applicable', max_digits=5, null=True)),
                ('notes', models.TextField(blank=True, help_text="Audit notes explaining the override (e.g., 'One-time bonus')")),
                ('effective_from', models.DateField(default=django.utils.timezone.now, help_text='Date from which the override is effective')),
                ('expires_at', models.DateField(blank=True, help_text='Date the override expires, if temporary', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the override was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the override was last updated')),
                ('branch', models.ForeignKey(blank=True, help_text='Branch this override applies to, if scoped', null=True, on_delete=django.db.models.deletion.CASCADE, to='cre.branch')),
                ('created_by', models.ForeignKey(help_text='Manager who created the override, for audit purposes', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='overrides_created', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(help_text='User this override applies to', on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.IntegerField(help_text='Month of the payroll period (1-12)')),
                ('year', models.IntegerField(help_text='Year of the payroll period')),
            ],
            options={
                'indexes': [models.Index(fields=['month', 'year'], name='payroll_per_month_89f7fc_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='period',
            constraint=models.CheckConstraint(check=models.Q(('month__gte', 1), ('month__lte', 12)), name='valid_month'),
        ),
        migrations.AddConstraint(
            model_name='period',
            constraint=models.CheckConstraint(check=models.Q(('year__gte', 2000)), name='valid_year'),
        ),
        migrations.AlterUniqueTogether(
            name='period',
            unique_together={('month', 'year')},
        ),
        migrations.AddField(
            model_name='override',
            name='period',
            field=models.ForeignKey(help_text='Payroll period this override applies to', on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to='payroll.period'),
        ),
        migrations.AddField(
            model_name='effectiverule',
            name='period',
            field=models.ForeignKey(help_text='Payroll period for this effective rule', on_delete=django.db.models.deletion.CASCADE, related_name='effective_rules', to='payroll.period'),
        ),
        migrations.AddField(
            model_name='record',
            name='branch',
            field=models.ForeignKey(help_text='Branch this payroll record applies to', on_delete=django.db.models.deletion.CASCADE, related_name='payroll_records', to='cre.branch'),
        ),
        migrations.AddField(
            model_name='record',
            name='period',
            field=models.ForeignKey(help_text='Payroll period for this record', on_delete=django.db.models.deletion.CASCADE, related_name='payroll_records', to='payroll.period'),
        ),
        migrations.AddField(
            model_name='record',
            name='user',
            field=models.ForeignKey(help_text='User this payroll record applies to', on_delete=django.db.models.deletion.CASCADE, related_name='payroll_records', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='component',
            name='record',
            field=models.ForeignKey(help_text='Payroll record this component belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='components', to='payroll.record'),
        ),
        migrations.AddField(
            model_name='rule',
            name='branch',
            field=models.ForeignKey(blank=True, help_text='Branch this rule applies to, if scope=branch', null=True, on_delete=django.db.models.deletion.CASCADE, to='cre.branch'),
        ),
        migrations.AddField(
            model_name='rule',
            name='company',
            field=models.ForeignKey(blank=True, help_text='Company this rule applies to, if scope=company', null=True, on_delete=django.db.models.deletion.CASCADE, to='cre.company'),
        ),
        migrations.AddField(
            model_name='rule',
            name='created_by',
            field=models.ForeignKey(help_text='Manager who created the rule, for audit purposes', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rules_created', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='rule',
            name='restaurant',
            field=models.ForeignKey(blank=True, help_text='Restaurant this rule applies to, if scope=restaurant', null=True, on_delete=django.db.models.deletion.CASCADE, to='cre.restaurant'),
        ),
        migrations.AddField(
            model_name='override',
            name='rule',
            field=models.ForeignKey(help_text='The rule being overridden', on_delete=django.db.models.deletion.CASCADE, related_name='overrides', to='payroll.rule'),
        ),
        migrations.AddField(
            model_name='effectiverule',
            name='rule',
            field=models.ForeignKey(help_text='The rule being applied', on_delete=django.db.models.deletion.CASCADE, related_name='effective_rules', to='payroll.rule'),
        ),
        migrations.AddField(
            model_name='component',
            name='rule',
            field=models.ForeignKey(help_text='Rule contributing to the payroll record', on_delete=django.db.models.deletion.CASCADE, related_name='components', to='payroll.rule'),
        ),
        migrations.AddField(
            model_name='ruletarget',
            name='branch',
            field=models.ForeignKey(blank=True, help_text='Branch this target applies to, if scoped', null=True, on_delete=django.db.models.deletion.CASCADE, to='cre.branch'),
        ),
        migrations.AddField(
            model_name='ruletarget',
            name='rule',
            field=models.ForeignKey(help_text='The rule this target applies to', on_delete=django.db.models.deletion.CASCADE, related_name='targets', to='payroll.rule'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['period', 'branch', 'user'], name='payroll_rec_period__ddfe83_idx'),
        ),
        migrations.AddConstraint(
            model_name='record',
            constraint=models.CheckConstraint(check=models.Q(('base_salary__gte', 0)), name='non_negative_base_salary'),
        ),
        migrations.AddConstraint(
            model_name='record',
            constraint=models.CheckConstraint(check=models.Q(('total_bonus__gte', 0)), name='non_negative_total_bonus'),
        ),
        migrations.AddConstraint(
            model_name='record',
            constraint=models.CheckConstraint(check=models.Q(('total_deduction__gte', 0)), name='non_negative_total_deduction'),
        ),
        migrations.AddConstraint(
            model_name='record',
            constraint=models.CheckConstraint(check=models.Q(('net_pay__gte', 0)), name='non_negative_net_pay'),
        ),
        migrations.AddIndex(
            model_name='rule',
            index=models.Index(fields=['scope', 'company', 'restaurant', 'branch', 'is_active', 'effective_from'], name='payroll_rul_scope_c95518_idx'),
        ),
        migrations.AddConstraint(
            model_name='rule',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0)), name='non_negative_amount'),
        ),
        migrations.AddConstraint(
            model_name='rule',
            constraint=models.CheckConstraint(check=models.Q(('percentage__gte', 0), ('percentage__isnull', True), _connector='OR'), name='non_negative_percentage'),
        ),
        migrations.AddIndex(
            model_name='override',
            index=models.Index(fields=['user', 'period', 'rule'], name='payroll_ove_user_id_089ab2_idx'),
        ),
        migrations.AddIndex(
            model_name='override',
            index=models.Index(fields=['branch', 'period'], name='payroll_ove_branch__f88da7_idx'),
        ),
        migrations.AddConstraint(
            model_name='override',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0), ('amount__isnull', True), _connector='OR'), name='non_negative_override_amount'),
        ),
        migrations.AddConstraint(
            model_name='override',
            constraint=models.CheckConstraint(check=models.Q(('percentage__gte', 0), ('percentage__isnull', True), _connector='OR'), name='non_negative_override_percentage'),
        ),
        migrations.AddIndex(
            model_name='effectiverule',
            index=models.Index(fields=['period', 'user', 'branch'], name='payroll_eff_period__280e0d_idx'),
        ),
        migrations.AddConstraint(
            model_name='effectiverule',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0)), name='non_negative_effective_amount'),
        ),
        migrations.AddConstraint(
            model_name='effectiverule',
            constraint=models.CheckConstraint(check=models.Q(('percentage__gte', 0), ('percentage__isnull', True), _connector='OR'), name='non_negative_effective_percentage'),
        ),
        migrations.AddIndex(
            model_name='component',
            index=models.Index(fields=['record', 'rule'], name='payroll_com_record__70dc7f_idx'),
        ),
        migrations.AddConstraint(
            model_name='component',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0)), name='non_negative_component_amount'),
        ),
        migrations.AddIndex(
            model_name='ruletarget',
            index=models.Index(fields=['rule', 'target_type', 'target_value'], name='payroll_rul_rule_id_f69473_idx'),
        ),
        migrations.AddIndex(
            model_name='ruletarget',
            index=models.Index(fields=['branch', 'target_type', 'target_value'], name='payroll_rul_branch__ad8c51_idx'),
        ),
        migrations.AddConstraint(
            model_name='ruletarget',
            constraint=models.UniqueConstraint(fields=('rule', 'target_type', 'target_value', 'branch'), name='unique_rule_target'),
        ),
    ]

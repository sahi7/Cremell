# Add regional director role - country_manager who stores mustiple countries #
# Store logs and notification data in separate db 

Count number of DB Querries in each permission class, policy, view and optimize them
Websocket notifications not beign sent
✅A restau must have a branch before another restau can be created within thesame company. Restau owners can't create restaus
✅Restrict creation of companyadmin and restauowner. 
✅Ownership can be transfered through an email - recipient would accept the ownership transfer for it to take effect.
  ✅companyadmin and restau owner can only transfer ownership
    for compadmin they need to add the user first as a countrymanager and then send them an invite to be a compadmin (no direct creation) - i think it should be same for restauowner (they create the user as branchmanager and send transfer of ownership invitation)
    companyadmin sends an invitation to join, restauowner sends a transfer of ownership

- View to assign managers and users to branches/restaurant✅
  PERM
    ✅Must be in BranchManger group
    ✅Must be in branch/restau scope
  ✅DETAILS
    ✅Write function to log Restaurant/BranchActivity - all logging use this function
    ✅Prevent Overwrite => If manager already exists they should be removed first (if a branch already has a manager)
      - Sync Many-to-Many Field => remove object (e.g branch) from users attributes (user.branches) after removal from branch
      - Prevent 2 admins from assigning managers at same time (generic function)
      - Notify => Notify old manager of their removal
      - Create a RestaurantActivity entry with manager_replace
    ✅Add new manager
      Replace => manager field should be empty now, just replace > Adds obj to user.restaurants
      Notify => Notify new manager of their assignment
    ✅Track History (Soft Replace)
      Create a RestaurantActivity entry with manager_assign > details JSON stores old and new manager IDs for auditing.
      Offload objectActivity logging to celery
- Complete View to transfer users within branches✅
  User should not transfer themselves
  from_branch/from_restaurant should be affiliated to user
- Upgrade user roles (from branchmanager to restaurantmanager)
    Can be done in single steps - escalate notifications up the hierachy when it happens

When deleting a restaurant, branches will be deleted or reassigned if multiple restaurants exist
  1. When deleting an object, Prompt user to set dependent object status to inactive first, by deleting them OR Set the status of dependent objects to inactive (force="true" for CA and RO only).
  2. Set the object’s status to inactive.
  3. Populate the DeletedObject model with deleted object, ID, deleted_timestamp=now, and finalize=deleted_timestamp + 24 hours. DeletedObject will help to keep track of objects that have been deleted until we can move them to another database
  4. Notify affiliated users of deleted object with notifications (Channels for normal users and Celery emails for critical stakeholders like managers).
    a. Make email templates (language compatible)
    b. Generic function to get stakeholders of an org
    c. Task to send email in batches
  5. Allow reversion during grace period.
  6. When the finalize field reaches its mark (grace period ends), a background task sets is_active=False for deleted objects (creates a JSON map for all related models to the deleted object for use when copying data to another database and removing from the active database).
  7. Notify stakeholders (post-finalization, confirming deletion completion).
- Shift management ✅
 Create shift model
  Prevent overlapping shift templates for the same branch (e.g., no two “Morning Shift” templates with conflicting times).
  Cache shift templates in Redis to reduce database queries for frequent access.
 Generate shift patterns - Encourage users to create all shift patterns (in 2 week intervals) before generation
  1. Fix get_queryset method
  2. Modify shift patterns to take user ids list rather than a single id
  3. When creating pattern check that the shift is of the branch & users[] is of branch
  4. Create action and modify handle_emergency overide
  5. Create StaffAvailability On First Shift Assignment
  6. ❌Enable shift swapping by employees -- No manager approval (must be enabled on branch first)
  7. ❌Add a `shift_leader` field to shift Model, they get notified when users swap shifts 
  8. Add currency field on branch
  9. Add 2 fields on Menu Model; is_pos_menu and is_web_or_app_menu
  10. Add 'Extension ' field to Branch Model; branch, kiosk, food_truck
  11. ❌When a user logs in, set their staff availaility/logout
  11. ❌Enable cooks to add orders via custom permissions
  12. Order process should validate menu items
  13. Add  created_at/updated_at to all Model fields
- Overtime management
  1. Bulk overtime confirmation for multiple users
- Complete order process
  Cache order items for branch daily (update cache on edit)
  CK getqueryset:: see order.status=received and claimed_by=user
  1. ❌Ensure a task cannot be claimed when already claimed
  2. ❌Add logic to cancel an order
  3. Add a `priority` field to Order Model (add priority details in order notes)
- Print receipts
  1. Save Printer configuration per branch 
- ❌Improve get_stakeholders when r_val has been corrected
- ❌views_helper does not change user.status when they are assigned

- Next
  A. Third-Party Integration: Connect with delivery platforms
  B. Profitability Dashboards: Show per-dish profit margins, linked to recipes
  C. Historical Comparison: Compare performance across periods/locations
  D. Custom Reports: Allow managers to build reports for specific metrics
  E. Data Security: Encrypt reports with single sign-on (SSO) for access control
  F. Generate reports in Celery tasks
  G. Delivery Analytics: Track third-party delivery performance
  H. Labor Cost Reports: Break down labor costs by shift/employee
  I. Export Options: Export reports as CSV/PDF for offline analysis
  J. Alert System: Notify managers of anomalies (e.g., sales drops) via Channels
  K. Real-Time Sales Analytics: Track sales by hour/branch, cached in Redis


# REDUCE DB REQUESTS WITH CACHING #
Try to create a system of prefetching and caching where only POST and PATCH requests hit the db. As soon as they hit, a background process updates cache/preload for that user. We need a robust system with cache, pickles and fast microservices (better retrival speed than db)
This will create the fastest system for GET[FILTER] requests - Its like scaling REDIS to work with hundred million requests but the underlying hardware is very important.
Third parties can learn how to use the DB we will create -- that works with this CACHE CLOUD


# Add regional director role #

Count number of DB Querries in each permission class, policy, view and optimize them
Websocket notifications not beign sent
✅A restau must have a branch before another restau can be created within thesame company. Restau owners can't create restaus
✅Restrict creation of companyadmin and restauowner. 
✅Ownership can be transfered through an email - recipient would accept the ownership transfer for it to take effect.
  ✅companyadmin and restau owner can only transfer ownership
    for compadmin they need to add the user first as a countrymanager and then send them an invite to be a compadmin (no direct creation) - i think it should be same for restauowner (they create the user as branchmanager and send transfer of ownership invitation)
    companyadmin sends an invitation to join, restauowner sends a transfer of ownership

- View to assign managers and users to branches/restaurant✅
  PERM
    ✅Must be in BranchManger group
    ✅Must be in branch/restau scope
  ✅DETAILS
    ✅Write function to log Restaurant/BranchActivity - all logging use this function
    ✅Prevent Overwrite => If manager already exists they should be removed first (if a branch already has a manager)
      - Sync Many-to-Many Field => remove object (e.g branch) from users attributes (user.branches) after removal from branch
      - Prevent 2 admins from assigning managers at same time (generic function)
      - Notify => Notify old manager of their removal
      - Create a RestaurantActivity entry with manager_replace
    ✅Add new manager
      Replace => manager field should be empty now, just replace > Adds obj to user.restaurants
      Notify => Notify new manager of their assignment
    ✅Track History (Soft Replace)
      Create a RestaurantActivity entry with manager_assign > details JSON stores old and new manager IDs for auditing.
      Offload objectActivity logging to celery
- Complete View to transfer users within branches✅
  User should not transfer themselves
  from_branch/from_restaurant should be affiliated to user
- Upgrade user roles (from branchmanager to restaurantmanager)
    Can be done in single steps - escalate notifications up the hierachy when it happens

When deleting a restaurant, branches will be deleted or reassigned if multiple restaurants exist
  1. When deleting an object, Prompt user to set dependent object status to inactive first, by deleting them OR Set the status of dependent objects to inactive (force="true" for CA and RO only).
  2. Set the object’s status to inactive.
  3. Populate the DeletedObject model with deleted object, ID, deleted_timestamp=now, and finalize=deleted_timestamp + 24 hours.
  4. Notify affiliated users of deleted object with notifications (Channels for normal users and Celery emails for critical stakeholders like managers).
  5. Allow reversion during grace period.
  6. When the finalize field reaches its mark (grace period ends), a background task sets is_active=False for deleted objects (creates a JSON map for all related models to the deleted object for use when copying data to another database and removing from the active database).
  7. Notify stakeholders (post-finalization, confirming deletion completion).
- Shift management
- Overtime management
- Complete order process
- Print receipts


# REDUCE DB REQUESTS WITH CACHING #
Try to create a system of prefetching and caching where only POST and PATCH requests hit the db. As soon as they hit, a background process updates cache/preload for that user. We need a robust system with cache, pickles and fast microservices (better retrival speed than db)
This will create the fastest system for GET[FILTER] requests - Its like scaling REDIS to work with hundred million requests but the underlying hardware is very important.
Third parties can learn how to use the DB we will create -- that works with this CACHE CLOUD


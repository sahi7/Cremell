# Generated by Django 5.0.4 on 2025-09-12 17:18

import django.db.models.deletion
import printing.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('cre', '0003_branch_logo_company_logo_restaurant_logo'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(default=printing.models.generate_device_uid, max_length=12, unique=True)),
                ('device_token', models.CharField(default=printing.models.generate_device_token, max_length=128, unique=True)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('expiry_date', models.DateTimeField(default=printing.models.default_expiry)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='devices_added', to=settings.AUTH_USER_MODEL)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to='cre.branch')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['device_id'], name='printing_de_device__50f475_idx'), models.Index(fields=['device_token', 'is_active'], name='printing_de_device__182139_idx'), models.Index(fields=['device_token', 'is_active', 'expiry_date'], name='printing_de_device__abb8f3_idx')],
                'unique_together': {('device_id', 'branch')},
            },
        ),
        migrations.CreateModel(
            name='Printer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Descriptive name for the printer, e.g., 'Kitchen Printer 1'", max_length=255)),
                ('connection_type', models.CharField(choices=[('usb', 'USB'), ('network', 'Network'), ('serial', 'Serial')], help_text='Type of connection to the printer', max_length=10)),
                ('vendor_id', models.CharField(blank=True, help_text="USB vendor ID in hex, e.g., '0x04b8' (required for USB)", max_length=10, null=True)),
                ('product_id', models.CharField(blank=True, help_text="USB product ID in hex, e.g., '0x0202' (required for USB)", max_length=10, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address for network printers (required for network)', null=True)),
                ('serial_port', models.CharField(blank=True, help_text="Serial port path, e.g., '/dev/ttyS0' (required for serial)", max_length=255, null=True)),
                ('profile', models.CharField(default='TM-T88III', help_text="ESC/POS profile for the printer model, e.g., 'TM-T88III'", max_length=50)),
                ('is_active', models.BooleanField(default=True, help_text='Whether the printer is currently active and available')),
                ('last_connected', models.DateTimeField(blank=True, help_text='Last time the printer was successfully connected', null=True)),
                ('fingerprint', models.CharField(max_length=256, unique=True)),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='printers', to='cre.branch')),
            ],
            options={
                'indexes': [models.Index(fields=['connection_type'], name='printing_pr_connect_42b17b_idx')],
                'unique_together': {('branch', 'fingerprint')},
            },
        ),
    ]
